
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      // A user can create their own document.
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // A user can read their own document.
      // They can also read another user's document if that user is in their friends list.
      allow read: if request.auth != null && (request.auth.uid == userId || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friends));

      // A user can only update or delete their own document.
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }

    match /watchlists/{listId} {
      // A user can read/write a watchlist if they are the owner.
      // This rule covers create, read, update, and delete by checking the userId on the document.
      allow read, write: if request.auth != null && ((request.resource.data.userId == request.auth.uid) || (resource.data.userId == request.auth.uid));
    }
    
    match /recommendations/{recommendationId} {
      // A user must be authenticated to create a recommendation.
      allow create: if request.auth != null;
      // A user can only read recommendations sent to them.
      allow read: if request.auth != null && resource.data.toUserId == request.auth.uid;
      allow delete: if false; 
    }
    
    match /friendRequests/{requestId} {
      // A user can read or delete a request if they are the sender or receiver.
      allow read, delete: if request.auth != null && (resource.data.fromUserId == request.auth.uid || resource.data.toUserId == request.auth.uid);
      // A user must be authenticated to create or update a request.
      allow create, update: if request.auth != null;
    }
  }
}
