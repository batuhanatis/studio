rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // Allow a user to read their own document fully
      allow read: if request.auth.uid == userId;

      // Allow a user to read a friend's document if they are in each other's friends list
      allow read: if request.auth.uid != null &&
                    get(/databases/$(database)/documents/users/$(userId)).data.friends.hasAny([request.auth.uid]);

      // Allow a user to update their own document, but not change critical fields
      allow update: if request.auth.uid == userId;
      
      // Allow a user to create their own document on signup
      allow create: if request.auth.uid == userId;
    }

    match /friendRequests/{requestId} {
       allow create: if request.auth.uid == request.resource.data.fromUserId &&
                        request.resource.data.keys().hasAll(['fromUserId', 'fromUserEmail', 'toUserId', 'toUserEmail', 'status', 'createdAt']) &&
                        request.resource.data.fromUserId is string &&
                        request.resource.data.toUserId is string &&
                        request.resource.data.fromUserEmail is string &&
                        request.resource.data.toUserEmail is string &&
                        request.resource.data.status == 'pending' &&
                        request.resource.data.createdAt == request.time;
      allow read, delete: if request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId;
    }

    match /blendRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.fromUserId;
      allow read, delete: if request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId;
      allow update: if request.auth.uid == resource.data.toUserId; // To accept
    }
    
    match /recommendations/{recommendationId} {
        allow create: if request.auth.uid == request.resource.data.fromUserId;
        allow read: if request.auth.uid == request.resource.data.toUserId;
    }

    match /watchlists/{watchlistId} {
      // Anyone authenticated can read a watchlist IF they are the owner
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Allow create, update, delete only for the owner of the watchlist
      allow create, update, delete: if request.auth.uid == request.resource.data.userId;
    }
  }
}
