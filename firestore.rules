rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read their own profile, and friends can read each other's profiles.
    // Anyone can create their own user document.
    // Users can only update their own document.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friends.hasAny([userId]));
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // A user can create a friend request if the `fromUserId` is their own UID.
    // They can read/delete requests sent to them or by them.
    match /friendRequests/{requestId} {
      allow read, delete: if request.auth != null && (request.resource.data.toUserId == request.auth.uid || request.resource.data.fromUserId == request.auth.uid);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.fromUserId
                      && 'fromUserId' in request.resource.data && request.resource.data.fromUserId == request.auth.uid
                      && 'toUserId' in request.resource.data && request.resource.data.toUserId != request.auth.uid
                      && 'fromUserEmail' in request.resource.data
                      && 'toUserEmail' in request.resource.data
                      && request.resource.data.status == 'pending'
                      && 'createdAt' in request.resource.data;
    }
    
    // Blend Requests can be created by the sender.
    // They can be read/deleted by either the sender or receiver.
    // The `users` collection can be updated by a user to add a friend to their `activeBlendsWith` list
    // only if there is a corresponding blend request. This allows for the atomic update on accept.
    match /blendRequests/{requestId} {
      allow read, delete: if request.auth != null && (resource.data.toUserId == request.auth.uid || resource.data.fromUserId == request.auth.uid);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.fromUserId;
    }
    
    match /users/{friendId} {
       allow update: if request.auth != null &&
                      // The field being updated must be 'activeBlendsWith'
                      request.resource.data.keys().hasOnly(['activeBlendsWith']) &&
                      // The user's own ID must be what's added to the friend's list
                      request.resource.data.activeBlendsWith == resource.data.activeBlendsWith.concat([request.auth.uid]) &&
                      // A blend request must exist from the friend to the current user
                      exists(/databases/$(database)/documents/blendRequests/{id}) where 
                      get(/databases/$(database)/documents/blendRequests/{id}).data.fromUserId == friendId &&
                      get(/databases/$(database)/documents/blendRequests/{id}).data.toUserId == request.auth.uid;
    }

    // Users can only read, create, update, and delete their own watchlists.
    match /watchlists/{listId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Users can send recommendations to other users.
    // Users can only read recommendations sent to them.
    match /recommendations/{recId} {
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
      allow read: if request.auth != null && resource.data.toUserId == request.auth.uid;
    }
  }
}
