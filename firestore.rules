
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if two users are friends
    function areFriends(userId1, userId2) {
      // Allow reading a user's own friends list to check friendship status
      return get(/databases/$(database)/documents/users/$(userId1)).data.friends.hasAny([userId2]);
    }

    // Users can only manage their own profile, but can read a friend's profile.
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || areFriends(request.auth.uid, userId));
      allow create, update: if isSignedIn() && isOwner(userId);
      // Deleting a user profile is disallowed for safety.
      allow delete: if false;
    }

    // Users can only manage their own watchlists.
    match /watchlists/{listId} {
      allow read, create, update, delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    // Users can send recommendations. Users can only read recommendations sent to them.
    match /recommendations/{recId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn() && isOwner(resource.data.toUserId);
      allow update, delete: if false;
    }

    // Secure handling for friend requests.
    match /friendRequests/{reqId} {
      allow read: if isSignedIn() && (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromUserId);
      // Only the recipient of the request can update its status (e.g., to 'accepted').
      allow update: if isSignedIn() && isOwner(resource.data.toUserId);
      // Either user involved in the request can delete it.
      allow delete: if isSignedIn() && (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId));
    }
  }
}
